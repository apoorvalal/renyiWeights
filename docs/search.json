[{"path":"/articles/example.html","id":"renyi-divergence","dir":"Articles","previous_headings":"","what":"Renyi Divergence","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"Many problems involve reweighting source sample \\(\\mathcal{S}\\) resemble target sample \\(\\mathcal{T}\\) solving moment conditions. problems can cast following form: \\[ \\text{min}_{w} D (w || d) \\] subject balance constraints \\[   \\sum_{: \\\\mathcal{S}} w_i c_{ri}(\\mathbf{X}_i) =  m_r(X_j) \\text{ } r \\1, \\dots, R \\] normalization \\[   \\sum_{: \\\\mathcal{S}} w_i = | \\mathcal{S}| \\] Many candidate \\(D(w || d)\\) distance metrics exist. popular one KL divergence, given \\[ D_1(w || d) = \\sum_{\\\\mathcal{S}} w_i \\log (w_i / d_i) \\] Similarly, one may also choose \\[ D_2(w || d) = \\log \\left ( \\sum_{\\\\mathcal{S}} w^2 /d_i  \\right) \\] special cases Renyi family divergences \\[ D(w || d) = D_\\alpha(w || d) = \\frac{1}{\\alpha - 1} \\log   \\left( \\sum_{\\\\mathcal{S}} \\frac{w_i^\\alpha}{d_i^{\\alpha - 1}} \\right) \\] package supports \\(D_1, D_2\\) progress (although \\(D_1\\) suffice applications, especially since computationally attractive).","code":""},{"path":"/articles/example.html","id":"entropy-balancing","dir":"Articles","previous_headings":"","what":"Entropy Balancing","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"Entropy balancing section builds Hainmueller(2012) accompanying r package ebal. Entropy balancing causal inference involves solving balancing weights \\(w_i\\) solves following (convex) program \\[\\begin{align*}   \\max_{\\mathbf{w}} H(w) &= - \\sum_{: \\\\mathcal{S} } w_i \\log w_i \\\\   \\text{Balance constraints:} & \\sum_{: \\\\mathcal{S}} w_i c_{ri}(\\mathbf{X}_i) =  m_r(X_j) \\text{ } r \\1, \\dots, R   \\\\   \\text{Proper weights:} & \\sum_{: \\\\mathcal{S}} w_i = 1 \\; \\; \\text{} w_i \\geq   0 \\; \\forall \\; \\{: \\\\mathcal{S} \\} \\end{align*}\\] convex program \\(R\\) balance constraints seek equate functions \\(c_{ri}(X_i)\\) source sample \\(\\mathcal{S}\\) target value \\(m_r\\). primal problem dimension \\(n_0 + R + 1\\).","code":""},{"path":"/articles/example.html","id":"dual-formulation","dir":"Articles","previous_headings":"Entropy Balancing","what":"Dual Formulation","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"Duality holds Lagrangian problem constraints can substituted . solution weight attained \\[ w_i^* = exp \\left(  - \\sum_{r =1}^R \\lambda_r c_{ri} (\\mathbf{X}_i) \\right) \\] \\(Z = \\{\\lambda_1, \\dots, \\lambda_R\\}'\\) vector Lagrange multipliers Lagrangian. Relevant extract Hainmueller (2012):  dual Lagrangian much smaller dimension \\(R\\) can solved fast using Newton’s method. demonstrate speed gains benchmarking.","code":""},{"path":"/articles/example.html","id":"basics-computing-average-treatment-effect-on-the-treated-att","dir":"Articles","previous_headings":"Entropy Balancing","what":"Basics : computing Average Treatment effect on the Treated (ATT)","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"straightforward example entropy balancing, seek reweight control observations \\(\\{: D_i = 0\\}\\) match sample moments treated sample order compute \\(\\Exp{Y^1 - Y^0 | D = 1}\\) second counterfactual mean \\(\\Exp{Y^0|D=1}\\) computed reweighted mean control group \\(\\sum_{: D_i = 0} w_i Y_i\\).","code":"# %% ############################################################ # ATT ############################################################ data(lalonde.psid); setDT(lalonde.psid); df = lalonde.psid yn = 're78'; wn = 'treat'; Xn = setdiff(colnames(df), c(yn, wn))  # rest of the code is generic X = df[get(wn) == 0, ..Xn] |> as.matrix() # treatment covariate means (for ATT) target = colMeans2(as.matrix(df[get(wn) == 1, ..Xn]))  # solve for balancing weights (solves dual by default) ω = entrBal(X, target)  # weighted regression (for robust standard errors) regdf = rbind(   # treated obs : uniform weights   data.table(y = df[get(wn) == 1, get(yn)], w = 1, wt = 1 / sum(df[[wn]])),   # untreated obs : solved weights   data.table(y = df[get(wn) == 0, get(yn)], w = 0, wt = ω) ) feols(y ~ w, weights = ~wt, data = regdf, vcov = \"HC1\") ## OLS estimation, Dep. Var.: y ## Observations: 2,675  ## Standard-errors: Heteroskedasticity-robust  ##             Estimate Std. Error t value   Pr(>|t|)     ## (Intercept)  3924.49    659.777 5.94821 3.0644e-09 *** ## w            2424.66    876.538 2.76618 5.7108e-03 **  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## RMSE: 205.2   Adj. R2: 0.025064"},{"path":"/articles/example.html","id":"compare-primal-and-dual-solutions","dir":"Articles","previous_headings":"Entropy Balancing > Basics : computing Average Treatment effect on the Treated (ATT)","what":"Compare primal and dual solutions","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"expected, weights identical.","code":"# %% check that primal and dual solutions are identical ω_primal = eb_solve_primal(c(1, target), cbind(1, X)) ωs = cbind(ω, ω_primal) # should lie along 45° line plot(ωs[, 1], ωs[,2]); abline(0,1)"},{"path":"/articles/example.html","id":"other-estimands-ate","dir":"Articles","previous_headings":"Entropy Balancing","what":"Other Estimands: ATE","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"ATE, need reweight treatment control groups equate covariate averages overall sample average.","code":"# %% ############################################################ # ATE ############################################################  data(lalonde.exp); setDT(lalonde.exp); df = lalonde.exp yn = 're78'; wn = 'treat'; Xn = setdiff(colnames(df), c(yn, wn))  X0 = df[get(wn) == 0, ..Xn] |> as.matrix() X1 = df[get(wn) == 1, ..Xn] |> as.matrix()  # overall covariate means (for ATE) target2 = colMeans2(as.matrix(df[, ..Xn]))  # solve for balancing weights - treatment obs ω1 = entrBal(X1, target2) ω0 = entrBal(X0, target2)  regdf = rbind(   # treated obs : uniform weights of 1   data.table(y = df[get(wn)== 1, get(yn)], w = 1, wt = ω1),   data.table(y = df[get(wn)== 0, get(yn)], w = 0, wt = ω0) )  feols(y ~ w, weights = ~wt, data = regdf, vcov = \"HC1\") ## OLS estimation, Dep. Var.: y ## Observations: 445  ## Standard-errors: Heteroskedasticity-robust  ##             Estimate Std. Error  t value  Pr(>|t|)     ## (Intercept)  4590.56    353.320 12.99265 < 2.2e-16 *** ## w            1571.81    689.266  2.28042  0.023057 *   ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## RMSE: 453.8   Adj. R2: 0.011074"},{"path":"/articles/example.html","id":"speed-comparison","dir":"Articles","previous_headings":"","what":"Speed comparison","title":"Renyi divergence weights for Causal Inference and Reweighting","text":"dual solver much faster primal EB.","code":"library(microbenchmark) microbenchmark(   eb_primal = {     eb_solve_primal(c(1, target), cbind(1, X))   },   eb_dual = {     eb_solve_dual(  c(1, target), cbind(1, X))   },   qr_primal = {     qr_solve_primal(c(1, target), cbind(1, X))   },   times = 100L ) ## Unit: milliseconds ##       expr         min          lq        mean      median          uq ##  eb_primal  323.923267  331.831341  379.005292  339.889250  354.380031 ##    eb_dual    8.373995    8.533503    9.267221    8.719521    9.244629 ##  qr_primal 1439.743452 1740.925114 1839.687712 1758.990169 1833.185587 ##         max neval cld ##   732.00169   100  b  ##    16.17057   100 a   ##  2948.89522   100   c"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Apoorva Lal. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lal (2023). renyiWeights: Solve weights satisfying moment conditions using Renyi divergences. R package version 0.1.","code":"@Manual{,   title = {renyiWeights: Solve for weights satisfying moment conditions using Renyi divergences},   author = {Apoorva Lal},   year = {2023},   note = {R package version 0.1}, }"},{"path":"/index.html","id":"renyiweights","dir":"","previous_headings":"","what":"Solve for weights satisfying moment conditions using Renyi divergences","title":"Solve for weights satisfying moment conditions using Renyi divergences","text":"Package solve balancing weights using Renyi divergences. Includes l1, l2, entropic regularisation weights.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"Solve for weights satisfying moment conditions using Renyi divergences","text":"{r} devtools::install_github(\"apoorvalal/renyiWeights\")","code":""},{"path":"/reference/OLSw.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute OLS with arbitrary vector of weights (possibly negative) — OLSw","title":"Compute OLS with arbitrary vector of weights (possibly negative) — OLSw","text":"Compute OLS arbitrary vector weights (possibly negative)","code":""},{"path":"/reference/OLSw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute OLS with arbitrary vector of weights (possibly negative) — OLSw","text":"","code":"OLSw(y, X, w)"},{"path":"/reference/OLSw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute OLS with arbitrary vector of weights (possibly negative) — OLSw","text":"y Response vector X numeric data matrix w vector weights (length y)","code":""},{"path":"/reference/OLSw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute OLS with arbitrary vector of weights (possibly negative) — OLSw","text":"Regression vector beta length ncol(X).","code":""},{"path":"/reference/bal.html","id":null,"dir":"Reference","previous_headings":"","what":"Bal: Approximate balancing weights — bal","title":"Bal: Approximate balancing weights — bal","text":"Solve set balancing weights subject convex loss.","code":""},{"path":"/reference/bal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bal: Approximate balancing weights — bal","text":"","code":"bal(Xt, X, objective = c(\"entropy\", \"l1\", \"l2\"), tol = 0, solv = \"MOSEK\")"},{"path":"/reference/bal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bal: Approximate balancing weights — bal","text":"Xt Target means (K vector) X Data matrix (N × K) objective Loss function weights. One entropy, L1, L2. tol Tolerance imbalance. 0 default, corresponds exact balance. solv Solver name pass CVXR solve","code":""},{"path":"/reference/bal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bal: Approximate balancing weights — bal","text":"n-vector weights","code":""},{"path":"/reference/bal_lbfgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Balancing weights using dual formulation implemented in torch (autodiff via torch) — bal_lbfgs","title":"Balancing weights using dual formulation implemented in torch (autodiff via torch) — bal_lbfgs","text":"Balancing weights using dual formulation implemented torch (autodiff via torch)","code":""},{"path":"/reference/bal_lbfgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balancing weights using dual formulation implemented in torch (autodiff via torch) — bal_lbfgs","text":"","code":"bal_lbfgs(   X0,   X1,   lr = 0.01,   num_iterations = 50,   objective = c(\"entr\", \"l2\"),   noi = FALSE,   debug = FALSE )"},{"path":"/reference/bal_lbfgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balancing weights using dual formulation implemented in torch (autodiff via torch) — bal_lbfgs","text":"X0 matrix donor covariates X1 target moments lr learning rate optimizer num_iterations number iterations run optimizer objective loss function (either \"entr\" \"l2\") noi boolean - print last value gradient debug print lots intermediate data","code":""},{"path":"/reference/bal_lbfgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balancing weights using dual formulation implemented in torch (autodiff via torch) — bal_lbfgs","text":"vector weights","code":""},{"path":"/reference/eb_solve_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy balancing by solving dual — eb_solve_dual","title":"Entropy balancing by solving dual — eb_solve_dual","text":"Entropy balancing solving dual","code":""},{"path":"/reference/eb_solve_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy balancing by solving dual — eb_solve_dual","text":"","code":"eb_solve_dual(   X1m,   X0,   coefs = NULL,   base.weight = NULL,   max.iterations = 200L,   constraint.tolerance = 1,   print.level = 0,   sparisfy = FALSE )"},{"path":"/reference/eb_solve_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy balancing by solving dual — eb_solve_dual","text":"X1m K-vector target means X0 NXK matrix covariates base.weight = [NULL] n-vector baseline weights max.iterations [200] stopping rule constraint.tolerance [1] value constraint threshold print.level [0, 1, 2, 3] 0 silent, 1 reports success, 2 3 noisy (debugging) sparsify [T/F] (progress) run Newton-Raphson sparse matrix classes Matrix package","code":""},{"path":"/reference/eb_solve_primal.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy balancing by solving primal\nMainly for didactic purposes; don't use. — eb_solve_primal","title":"Entropy balancing by solving primal\nMainly for didactic purposes; don't use. — eb_solve_primal","text":"Entropy balancing solving primal Mainly didactic purposes; use.","code":""},{"path":"/reference/eb_solve_primal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy balancing by solving primal\nMainly for didactic purposes; don't use. — eb_solve_primal","text":"","code":"eb_solve_primal(X1m, X0, solv = \"MOSEK\")"},{"path":"/reference/eb_solve_primal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy balancing by solving primal\nMainly for didactic purposes; don't use. — eb_solve_primal","text":"X1m K-vector target means X0 NXK matrix covariates solv Solver CVXR ()","code":""},{"path":"/reference/ebal_torch.html","id":null,"dir":"Reference","previous_headings":"","what":"ebal implementation with autodiff via torch — ebal_torch","title":"ebal implementation with autodiff via torch — ebal_torch","text":"ebal implementation autodiff via torch","code":""},{"path":"/reference/ebal_torch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ebal implementation with autodiff via torch — ebal_torch","text":"","code":"ebal_torch(X0, X1)"},{"path":"/reference/ebal_torch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ebal implementation with autodiff via torch — ebal_torch","text":"X0 donor units matrix X1 target moments","code":""},{"path":"/reference/ebal_torch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ebal implementation with autodiff via torch — ebal_torch","text":"vector weights","code":""},{"path":"/reference/entrBal.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute entropy balancing weights that minimize KL divergence between uniform and solution weights. These are Renyi weights for α = 1 — entrBal","title":"Compute entropy balancing weights that minimize KL divergence between uniform and solution weights. These are Renyi weights for α = 1 — entrBal","text":"Compute entropy balancing weights minimize KL divergence uniform solution weights. Renyi weights α = 1","code":""},{"path":"/reference/entrBal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute entropy balancing weights that minimize KL divergence between uniform and solution weights. These are Renyi weights for α = 1 — entrBal","text":"","code":"entrBal(   target_moments,   X,   max.iterations = 200L,   base.weights = NULL,   constraint.tolerance = 1,   print.level = 0 )"},{"path":"/reference/entrBal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute entropy balancing weights that minimize KL divergence between uniform and solution weights. These are Renyi weights for α = 1 — entrBal","text":"target_moments [vector, matrix] target moments match X columns (1 x k) X [data.frame, matrix] table covariates source sample (n x k) max.iterations [200] stopping rule base.weights = [NULL] n-vector baseline weights constraint.tolerance [1] value constraint threshold print.level [0, 1, 2, 3] 0 silent, 1 reports success, 2 3 noisy (debugging)","code":""},{"path":"/reference/entrBal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute entropy balancing weights that minimize KL divergence between uniform and solution weights. These are Renyi weights for α = 1 — entrBal","text":"list containing n-vector weights","code":""},{"path":"/reference/hainmueller.html","id":null,"dir":"Reference","previous_headings":"","what":"DGP from Frolich (2007) / Hainmueller (2012) — hainmueller","title":"DGP from Frolich (2007) / Hainmueller (2012) — hainmueller","text":"DGP Frolich (2007) / Hainmueller (2012)","code":""},{"path":"/reference/hainmueller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DGP from Frolich (2007) / Hainmueller (2012) — hainmueller","text":"","code":"hainmueller(error_design, outcome_design, n = 10000)"},{"path":"/reference/hainmueller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DGP from Frolich (2007) / Hainmueller (2012) — hainmueller","text":"error_design string (1, 2, 3) low, medium, high overlap. outcome_design string (1, 2, 3) linear, complex, quadratic outcome model. n sample size","code":""},{"path":"/reference/qr_solve_primal.html","id":null,"dir":"Reference","previous_headings":"","what":"Balancing weights to minimise quadratic divergence between uniform and solution weights. These are Renyi weights for α = 2 — qr_solve_primal","title":"Balancing weights to minimise quadratic divergence between uniform and solution weights. These are Renyi weights for α = 2 — qr_solve_primal","text":"Balancing weights minimise quadratic divergence uniform solution weights. Renyi weights α = 2","code":""},{"path":"/reference/qr_solve_primal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balancing weights to minimise quadratic divergence between uniform and solution weights. These are Renyi weights for α = 2 — qr_solve_primal","text":"","code":"qr_solve_primal(X1m, X0, base_weights = NULL, solv = \"MOSEK\")"},{"path":"/reference/qr_solve_primal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balancing weights to minimise quadratic divergence between uniform and solution weights. These are Renyi weights for α = 2 — qr_solve_primal","text":"solv solver CVXR X [data.frame, matrix] table covariates source sample (n x k) target_moments [vector, matrix] target moments match X columns (1 x k) base weights n_0 vector base weights","code":""},{"path":"/reference/qr_solve_primal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balancing weights to minimise quadratic divergence between uniform and solution weights. These are Renyi weights for α = 2 — qr_solve_primal","text":"list containing n-vector weights","code":""}]
